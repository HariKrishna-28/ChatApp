{"version":3,"sources":["components/Login.jsx","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Conversations.jsx","components/Contacts.jsx","components/NewContactModal.jsx","components/NewConversationModal.jsx","components/Sidebar.jsx","components/OpenConversation.jsx","components/Dashboard.jsx","App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","className","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","style","width","onClick","uuidV4","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","process","PORT","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","Conversations","ListGroup","variant","Item","action","active","r","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","Button","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","Tab","Container","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","InputGroup","as","target","height","resize","Append","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.452476f4.chunk.js","sourcesContent":["import React, { useRef } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { v4 as uuidV4 } from 'uuid'\r\n\r\nconst Login = ({ onIdSubmit }) => {\r\n    const idRef = useRef()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        onIdSubmit(idRef.current.value)\r\n    }\r\n\r\n    function createNewId() {\r\n        onIdSubmit(uuidV4())\r\n    }\r\n\r\n    return (\r\n        // <>\r\n        //     <h1 className=\"flex justify-center\">Welcome to chat app</h1>\r\n        <div className=\"container flex items-center h-screen \" >\r\n            <Form className=\"w-100\" onSubmit={handleSubmit}>\r\n                <Form.Group>\r\n                    <Form.Label className=\"flex justify-center text-3xl font-semibold\">Enter your ID</Form.Label>\r\n                    <Form.Control type=\"text\" ref={idRef} required />\r\n                </Form.Group>\r\n\r\n                <div className=\"flex justify-center\">\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"bg-blue-500 mt-4 mr-2 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n                        style={{ width: '8rem' }}\r\n                    >\r\n                        Login\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={createNewId}\r\n                        className=\"bg-blue-500 mt-4 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n                        style={{ width: '8rem' }}\r\n                    >\r\n                        Sign Up\r\n                    </button>\r\n\r\n                </div>\r\n            </Form>\r\n        </div>\r\n        // </>\r\n    )\r\n}\r\n\r\n\r\nexport default Login\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'chat-application-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key\r\n\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        if (typeof initialValue === 'function') {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}","import React, { useContext } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ContactsContext = React.createContext()\r\n\r\nexport function useContacts() {\r\n    return useContext(ContactsContext)\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n    const [contacts, setContacts] = useLocalStorage('contacts', [])\r\n\r\n    function createContact(id, name) {\r\n        setContacts(prevContacts => {\r\n            return [...prevContacts, { id, name }]\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ContactsContext.Provider value={{ contacts, createContact }}>\r\n            {children}\r\n        </ContactsContext.Provider>\r\n    )\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\n// heroku project url\r\nconst baseUrl = \"https://chat-application-28.herokuapp.com\"\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nexport function useSocket() {\r\n    return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n    const [socket, setSocket] = useState()\r\n\r\n    useEffect(() => {\r\n        const newSocket = io(\r\n            // { baseUrl },\r\n            process.env.PORT,\r\n            { query: { id } }\r\n        )\r\n        setSocket(newSocket)\r\n\r\n        return () => newSocket.close()\r\n    }, [id])\r\n\r\n    return (\r\n        <SocketContext.Provider value={socket}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}","import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n    const { contacts } = useContacts()\r\n    const socket = useSocket()\r\n\r\n    function createConversation(recipients) {\r\n        setConversations(prevConversations => {\r\n            return [...prevConversations, { recipients, messages: [] }]\r\n        })\r\n    }\r\n\r\n    const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n        setConversations(prevConversations => {\r\n            let madeChange = false\r\n            const newMessage = { sender, text }\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if (arrayEquality(conversation.recipients, recipients)) {\r\n                    madeChange = true\r\n                    return {\r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n\r\n                return conversation\r\n            })\r\n\r\n            if (madeChange) {\r\n                return newConversations\r\n            } else {\r\n                return [\r\n                    ...prevConversations,\r\n                    { recipients, messages: [newMessage] }\r\n                ]\r\n            }\r\n        })\r\n    }, [setConversations])\r\n\r\n    useEffect(() => {\r\n        if (socket == null) return\r\n\r\n        socket.on('receive-message', addMessageToConversation)\r\n\r\n        return () => socket.off('receive-message')\r\n    }, [socket, addMessageToConversation])\r\n\r\n    function sendMessage(recipients, text) {\r\n        socket.emit('send-message', { recipients, text })\r\n\r\n        addMessageToConversation({ recipients, text, sender: id })\r\n    }\r\n\r\n    const formattedConversations = conversations.map((conversation, index) => {\r\n        const recipients = conversation.recipients.map(recipient => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient\r\n            })\r\n            const name = (contact && contact.name) || recipient\r\n            return { id: recipient, name }\r\n        })\r\n\r\n        const messages = conversation.messages.map(message => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === message.sender\r\n            })\r\n            const name = (contact && contact.name) || message.sender\r\n            const fromMe = id === message.sender\r\n            return { ...message, senderName: name, fromMe }\r\n        })\r\n\r\n        const selected = index === selectedConversationIndex\r\n        return { ...conversation, messages, recipients, selected }\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectedConversation: formattedConversations[selectedConversationIndex],\r\n        sendMessage,\r\n        selectConversationIndex: setSelectedConversationIndex,\r\n        createConversation\r\n    }\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={value}>\r\n            {children}\r\n        </ConversationsContext.Provider>\r\n    )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n    if (a.length !== b.length) return false\r\n\r\n    a.sort()\r\n    b.sort()\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index]\r\n    })\r\n}","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Conversations() {\r\n    const { conversations, selectConversationIndex } = useConversations()\r\n\r\n    return (\r\n        <ListGroup variant=\"flush\">\r\n            {conversations.map((conversation, index) => (\r\n                <ListGroup.Item\r\n                    key={index}\r\n                    action\r\n                    onClick={() => selectConversationIndex(index)}\r\n                    active={conversation.selected}\r\n                >\r\n                    {conversation.recipients.map(r => r.name).join(', ')}\r\n                </ListGroup.Item>\r\n            ))}\r\n        </ListGroup>\r\n    )\r\n}","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\n\r\nexport default function Contacts() {\r\n    const { contacts } = useContacts()\r\n\r\n    return (\r\n        <ListGroup variant=\"flush\">\r\n            {contacts.map(contact => (\r\n                <ListGroup.Item key={contact.id}>\r\n                    {contact.name}\r\n                </ListGroup.Item>\r\n            ))}\r\n        </ListGroup>\r\n    )\r\n}","import React, { useRef } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n    const idRef = useRef()\r\n    const nameRef = useRef()\r\n    const { createContact } = useContacts()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        createContact(idRef.current.value, nameRef.current.value)\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Contact</Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control type=\"text\" ref={idRef} required />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type=\"text\" ref={nameRef} required />\r\n                    </Form.Group>\r\n                    <div className=\"flex justify-center mt-2\">\r\n                        <Button type=\"submit\">Create Contact</Button>\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n    const [selectedContactIds, setSelectedContactIds] = useState([])\r\n    const { contacts } = useContacts()\r\n    const { createConversation } = useConversations()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        createConversation(selectedContactIds)\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId) {\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if (prevSelectedContactIds.includes(contactId)) {\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prevId\r\n                })\r\n            } else {\r\n                return [...prevSelectedContactIds, contactId]\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Conversation</Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    {contacts.map(contact => (\r\n                        <Form.Group controlId={contact.id} key={contact.id}>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                value={selectedContactIds.includes(contact.id)}\r\n                                label={contact.name}\r\n                                onChange={() => handleCheckboxChange(contact.id)}\r\n                            />\r\n                        </Form.Group>\r\n                    ))}\r\n\r\n                    <div className=\"flex justify-center mt-2\">\r\n                        <Button type=\"submit\">Create</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Tab, Nav, Button, Modal } from 'react-bootstrap'\r\nimport Conversations from './Conversations'\r\nimport Contacts from './Contacts'\r\nimport NewContactModal from './NewContactModal'\r\nimport NewConversationModal from './NewConversationModal'\r\n\r\nconst CONVERSATIONS_KEY = 'conversations'\r\nconst CONTACTS_KEY = 'contacts'\r\n\r\nexport default function Sidebar({ id }) {\r\n    const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY)\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const conversationsOpen = activeKey === CONVERSATIONS_KEY\r\n\r\n    function closeModal() {\r\n        setModalOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: '250px' }} className=\"d-flex flex-column\">\r\n            <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n                <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n                <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\r\n                    <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                        <Conversations />\r\n                    </Tab.Pane>\r\n                    <Tab.Pane eventKey={CONTACTS_KEY}>\r\n                        <Contacts />\r\n                    </Tab.Pane>\r\n                </Tab.Content>\r\n                <div className=\"p-2 border-top border-right small\">\r\n                    Your Id :<span className=\"text-muted\">{id}</span>\r\n                </div>\r\n                <Button onClick={() => setModalOpen(true)} className=\"rounded-0\">\r\n                    New {conversationsOpen ? 'Conversation' : 'Contact'}\r\n                </Button>\r\n            </Tab.Container>\r\n\r\n            <Modal show={modalOpen} onHide={closeModal}>\r\n                {conversationsOpen ?\r\n                    <NewConversationModal closeModal={closeModal} /> :\r\n                    <NewContactModal closeModal={closeModal} />\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n}","import React, { useState, useCallback } from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function OpenConversation() {\r\n    const [text, setText] = useState('')\r\n    const setRef = useCallback(node => {\r\n        if (node) {\r\n            node.scrollIntoView({ smooth: true })\r\n        }\r\n    }, [])\r\n    const { sendMessage, selectedConversation } = useConversations()\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        sendMessage(\r\n            selectedConversation.recipients.map(r => r.id),\r\n            text\r\n        )\r\n        setText('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column flex-grow-1\">\r\n            <div className=\"flex-grow-1 overflow-auto\">\r\n                <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n                    {selectedConversation.messages.map((message, index) => {\r\n                        const lastMessage = selectedConversation.messages.length - 1 === index\r\n                        return (\r\n                            <div\r\n                                ref={lastMessage ? setRef : null}\r\n                                key={index}\r\n                                className={`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\r\n                            >\r\n                                <div\r\n                                    className={`rounded px-2 py-1 ${message.fromMe ? 'bg-primary text-white' : 'border'}`}>\r\n                                    {message.text}\r\n                                </div>\r\n                                <div className={`text-muted small ${message.fromMe ? 'text-right' : ''}`}>\r\n                                    {message.fromMe ? 'You' : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"m-2\">\r\n                    <InputGroup>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            required\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                            style={{ height: '75px', resize: 'none' }}\r\n                        />\r\n                        <InputGroup.Append className=\"m-auto\">\r\n                            <Button type=\"submit\" className=\"py-4 rounded ml-1\">Send</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Sidebar from './Sidebar';\r\nimport OpenConversation from './OpenConversation';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Dashboard({ id }) {\r\n    const { selectedConversation } = useConversations()\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ height: '100vh' }}>\r\n\r\n            <Sidebar id={id} />\r\n            {selectedConversation && <OpenConversation />}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Login from './components/Login'\r\nimport useLocalStorage from './hooks/useLocalStorage'\r\nimport Dashboard from './components/Dashboard'\r\nimport { ContactsProvider } from './contexts/ContactsProvider'\r\nimport { ConversationsProvider } from './contexts/ConversationsProvider'\r\nimport { SocketProvider } from './contexts/SocketProvider'\r\n\r\nfunction App() {\r\n  const [id, setId] = useLocalStorage(\"id\")\r\n\r\n  const dashboard = (\r\n    <SocketProvider id={id}>\r\n      <ContactsProvider>\r\n        <ConversationsProvider>\r\n\r\n          <Dashboard id={id} />\r\n\r\n        </ConversationsProvider>\r\n      </ContactsProvider>\r\n\r\n    </SocketProvider>\r\n  )\r\n\r\n  return (\r\n    id ? dashboard : <Login onIdSubmit={setId} />\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}